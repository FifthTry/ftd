;; FASTN_DB_URL, FASTN_ENABLE_AUTH must be set
-- import: fastn

-- fastn.test: create user

-- fastn.post: Create user with empty data
url: /-/auth/create-account/
body: {"name": "", "email": "", "password": "", "username": ""}

-- fastn.post.test:

fastn.assert.eq(fastn.http_response.success, false);
fastn.assert.not_empty(fastn.http_response.errors);

-- fastn.post: Create user with insufficient data should fail
url: /-/auth/create-account/
body: {"username": "siddhant"}

-- fastn.post.test:

fastn.assert.not_empty(fastn.http_response.errors.payload);

-- fastn.post: Create user with empty data
url: /-/auth/create-account/?next=/hello/
body: {"name": "", "email": "", "password": "", "password2": "", "username": "", "accept_terms": false}


-- fastn.post.test:

fastn.assert.eq(fastn.http_response.success, false);
fastn.assert.not_empty(fastn.http_response.errors.password);


-- fastn.post: Create user with invalid data
url: /-/auth/create-account/?next=/hello/
body: {"name": "John", "email": "john@mail.com", "password": "testpasswd", "password2": "test", "username": "john", "accept_terms": false}


-- fastn.post.test:

fastn.assert.eq(fastn.http_response.success, false);
fastn.assert.not_empty(fastn.http_response.errors.password2);
fastn.assert.not_empty(fastn.http_response.errors.accept_terms);


-- fastn.post: Create user with valid data
url: /-/auth/create-account/?next=/hello/
body: {"name": "John", "email": "john@mail.com", "password": "john the don", "password2": "john the don", "username": "john", "accept_terms": true}
http-redirect: http://localhost:8080/-/auth/resend-confirmation-email/?email=john@mail.com&next=/hello/

-- fastn.post: Create user with same data should result in an error
url: /-/auth/create-account/?next=/hello/
body: {"name": "John", "email": "john@mail.com", "password": "john the don", "password2": "john the don", "username": "john", "accept_terms": true}


-- fastn.post.test:

fastn.assert.not_empty(fastn.http_response.errors.username);


-- fastn.post: login with empty data should error
url: /-/auth/login/
body: {"username": "", "password": ""}

-- fastn.post.test:

fastn.assert.eq(fastn.http_response.success, false);
fastn.assert.not_empty(fastn.http_response.errors);
fastn.assert.not_empty(fastn.http_response.errors.username);
fastn.assert.not_empty(fastn.http_response.errors.password);

-- fastn.post: login with insufficient data should error
url: /-/auth/login/
body: {"username": "someone"}

-- fastn.post.test:

fastn.assert.not_empty(fastn.http_response.errors.payload);


-- fastn.post: login with invalid user shouldn't work
url: /-/auth/login/
body: {"username": "someone", "password": "veryrealpasswd"}

-- fastn.post.test:

fastn.assert.not_empty(fastn.http_response.errors.username);


-- fastn.post: login with valid user but wrong password
url: /-/auth/login/
body: {"username": "john", "password": "veryrealpasswd"}

-- fastn.post.test:

fastn.assert.not_empty(fastn.http_response.errors.password);


-- fastn.post: login with valid but unverfied user also works
url: /-/auth/login/?next=/hello/
body: {"username": "john", "password": "john the don"}
http-redirect: /hello/


;; TODO: verify user
;; TODO: resend email
;; TODO: successfull login
;; TODO: logout

;;-- fastn.post: logout on logged in user
;;-- fastn.post: logout with no session

