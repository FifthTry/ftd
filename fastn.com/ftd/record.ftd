/-- ft-core.concept:

-- ds.page: `record`

-- ds.markdown:

`fastn` supports `record` types. These are also called `struct` in some
languages.

-- ds.h1: Declaring a `record`

Before a record can be used it must be declared using the `record` syntax:

-- ds.code: Declaring a Person record
lang: ftd

\-- record person:
caption name:
integer age:
optional body bio:

-- ds.markdown:

Here we are creating a record. The name of the record is `person`. It has three
fields: `name`, `age` and `bio`.

-- ds.code: Declaring a Company record
lang: ftd

\-- record company:
caption name:
person list employees:

-- ds.markdown:

In this case, the name of the record is `company`. It has two fields:
caption `name` and list of `employees` of `person` type.

-- ds.h1: Declaring a `record` with default values

Sometimes, the programmer might want to provide default values to the record
fields, in case if he/she doesn't specify those during initialization.

-- ds.code: Declaring a Person record with default field values
lang: ftd

\-- record person:
caption name: Undefined
integer age:
optional body bio: Not specified

\;; << Alternative way >>
\-- record person:
caption name: Undefined
integer age:

\-- optional body person.bio:

No bio is specified for this person.

-- ds.code: Declaring a Company record with default field values
lang: ftd

\-- record company:
string name: FifthTry

\-- person list company.employees:

\-- person:
name: Arpita
age: 22

\-- person:
name: Abrar
age: 24

\-- end: company.employees


-- ds.h1: Field Types

Fields can be either one of the [built-in types](ftd/built-in-types/),
another type like a [`record`](ftd/record/) or [`or-type`](ftd/or-type/).

-- ds.h1: Record Variable

A [variable](ftd/variables/) can be created with type `record`:

-- ds.code:
lang: ftd

\-- person john-snow: John Snow
age: 14

-- ds.markdown:

Here we have created a new variable of type `person`, called it `amitu`, and the
value of `name`, since its declared as `caption` in the record definition, is read
from the "caption" area, and `age` is read from the "header".

Note that we have not passed `bio`, since `bio` is declared as `optional body`,
so it's not a problem. Had it been just `body` the above would not have been
valid.

-- ds.h1: Record Field Update Syntax

The field which needs to be updated has to be mutable before updating its value.
An individual field of a record can be updated using a syntax like this:

-- ds.code:
lang: ftd

\-- $john-snow.age: 15

\-- person $john-snow: John Snow
$age: 14


-- ds.markdown:

Here we have used `-- $john-snow.age: 15` to update a single field of a record.

This also works if the field is a list:

-- ds.code:
lang: ftd

\-- record person:
caption name:
string list alias:

\-- person $john-snow: John Snow

\-- $john-snow.alias:

\-- string: Aegon Targaryen
\-- string: Lord Crow
\-- string: The White Wolf
\-- string: The Prince That Was Promised

\-- end: $john-snow.alias


-- ds.h1: Reading A Record From Rust

A `record` in `fastn` is equivalent of a `struct` in Rust.

-- ds.h2: Rust Type

To read the above `.ftd` file from Rust you will have to first create a `struct`
in Rust that is compatible with our `person` definition:

-- ds.code:
lang: rs

#[derive(serde::Deserialize)]
struct Person {
    name: String,
    age: i32,
    bio: Option<String>,
}

-- ds.markdown:

For each field in `person` record, we have a corresponding field in our `Person`
`struct`.

Note that we used `age` as i32, but it could have been any type that can be
deserialised from
[JSON Number](https://docs.serde.rs/serde_json/struct.Number.html) since
`fastn` integer is converted to `JSON Number`.

;; Todo:
/-- ds.h2: Getting Data From `.ftd` File

Once the mapping is in place, we can use the `fastn` crate to parse a `.ftd`
file, and get data out of it:

/-- ds.code:
lang: rs

let doc = ftd::p2::Document::from("some/id", source, lib)?;
let amitu: Person = doc.get("amitu")?;

/-- ds.markdown:

You can read more details of reading `.ftd` files
[`Reading .ftd Files`](reading-data/) guide.


-- end: ds.page
