-- ds.page: Built-in Rive Functions

These [rive](/rive/) functions are available as a part of fastn and can be used
in any fastn document. Checkout [built-in functions](/built-in-functions/) to
know more about other functions available in fastn.


-- ds.h1: Functions for Rive Timeline

These functions are applied to rive timeline.



-- ds.h2: `ftd.toggle-play-rive(rive: string, input: string)`

Return type: `void`

It plays an animation, if the animation is not playing, or else pauses it.

It takes `rive` which is the [`id`](rive/#id) provided while declaring a rive
component. It also takes `input` which is the timeline name.

-- ds.rendered: Sample code using `ftd.toggle-play-rive(...)`

	-- ds.rendered.input:
	
	\-- ftd.rive:
	id: vehicle
	src: https://cdn.rive.app/animations/vehicles.riv
	autoplay: false
	artboard: Jeep
	width.fixed.px: 600
	
	\-- ftd.text: Idle/Run
	$on-click$: $ftd.toggle-play-rive(rive = vehicle, input = idle)
	align-self: center
	
	
	-- ds.rendered.output:
	
		-- ftd.rive:
		id: vehicle
		src: https://cdn.rive.app/animations/vehicles.riv
		autoplay: false
		artboard: Jeep
		width.fixed.px: 600
		
		-- ftd.text: Idle/Run
		$on-click$: $ftd.toggle-play-rive(rive = vehicle, input = idle)
		align-self: center
		color: $inherited.colors.text
		
	-- end: ds.rendered.output

-- end: ds.rendered







-- ds.h2: `ftd.play-rive(rive: string, input: string)`

Return type: `void`

It plays an animation.

It takes `rive` which is the [`id`](rive/#id) provided while declaring a rive
component. It also takes `input` which is the timeline name.




-- ds.h2: `ftd.pause-rive(rive: string, input: string)`

Return type: `void`

It pauses an animation.

It takes `rive` which is the [`id`](rive/#id) provided while declaring a rive
component. It also takes `input` which is the timeline name.


-- ds.rendered: Sample code using `ftd.play-rive(...)` and `ftd.pause-rive(...)`

	-- ds.rendered.input:
	
	\-- ftd.rive:
	id: bell
	src: $fastn-assets.files.assets.bell-icon.riv
	autoplay: false
	width.fixed.px: 200
	$on-mouse-enter$: $ftd.play-rive(rive = bell, input = Hover)
	$on-mouse-leave$: $ftd.pause-rive(rive = bell, input = Hover)
	
	-- ds.rendered.output:
	
		-- ftd.rive:
		id: bell
		src: $fastn-assets.files.assets.bell-icon.riv
		autoplay: false
		width.fixed.px: 200
		$on-mouse-enter$: $ftd.play-rive(rive = bell, input = Hover)
		$on-mouse-leave$: $ftd.pause-rive(rive = bell, input = Hover)
		
	-- end: ds.rendered.output

-- end: ds.rendered








-- ds.h1: Functions for Rive State Machine

These functions are applied to rive state machine.




-- ds.h2: `ftd.fire-rive(rive: string, input: string)`

Return type: `void`

It fires `trigger` identify by `input`.

It takes `rive` which is the [`id`](rive/#id) provided while declaring a rive
component. It also takes `input` which is the trigger type input in state
machine.



-- ds.rendered: Sample code using `ftd.fire-rive(...)`

	-- ds.rendered.input:
	
	\-- ftd.rive:
	id: van
	src: https://cdn.rive.app/animations/vehicles.riv
	width.fixed.px: 400
	state-machine: bumpy
	$on-click$: $ftd.fire-rive(rive = van, input = bump)
	
	-- ds.rendered.output:
	
		-- ftd.rive:
		id: van
		src: https://cdn.rive.app/animations/vehicles.riv
		width.fixed.px: 400
		state-machine: bumpy
		$on-click$: $ftd.fire-rive(rive = van, input = bump)
		
	-- end: ds.rendered.output

-- end: ds.rendered







-- ds.h2: `ftd.set-rive-integer(rive: string, input: string, value: integer)`

Return type: `void`

It take the number type input and sets the value

It takes `rive` which is the [`id`](rive/#id) provided while declaring a rive
component, `input` which is the number type and `value` which is set to the
input.


-- ds.rendered: Sample code using `ftd.set-rive-integer(...)`

	-- ds.rendered.input:
	
	\-- ftd.rive:
	id: helix-loader
	src: $fastn-assets.files.assets.helix-loader.riv
	width.fixed.px: 400
	state-machine: State Machine
	$on-click$: $ftd.set-rive-integer(rive = helix-loader, input = Load Percentage, value = 50)
	
	-- ds.rendered.output:
	
		-- ftd.rive:
		id: helix-loader
		src: $fastn-assets.files.assets.helix-loader.riv
		width.fixed.px: 400
		state-machine: State Machine
		$on-click$: $ftd.set-rive-integer(rive = helix-loader, input = Load Percentage, value = 50)
		
	-- end: ds.rendered.output

-- end: ds.rendered







-- ds.h2: `ftd.toggle-rive-boolean(rive: string, input: string)`

Return type: `void`

It take the number type input and sets the value

It takes `rive` which is the [`id`](rive/#id) provided while declaring a rive
component and `input` which is the boolean type.


-- ds.rendered: Sample code using `ftd.toggle-rive-boolean(...)`

	-- ds.rendered.input:
	
	\-- ftd.rive:
	id: toggle
	src: $fastn-assets.files.assets.toggleufbot.riv
	state-machine: StateMachine
	width.fixed.px: 400
	
	\-- ftd.text: Click me
	$on-click$: $ftd.toggle-rive-boolean(rive = toggle, input = Toggle)
	
	-- ds.rendered.output:
	
		-- ftd.rive:
		id: toggle
		src: $fastn-assets.files.assets.toggleufbot.riv
		state-machine: StateMachine
		width.fixed.px: 400
		
		-- ftd.text: Click me
		$on-click$: $ftd.toggle-rive-boolean(rive = toggle, input = Toggle)
		color: $inherited.colors.text
		
	-- end: ds.rendered.output

-- end: ds.rendered






-- ds.h2: `ftd.set-rive-boolean(rive: string, input: string, value: boolean)`

Return type: `void`

It take the number type input and sets the value

It takes `rive` which is the [`id`](rive/#id) provided while declaring a rive
component, `input` which is the boolean type and `value` which is set to the
input.


-- ds.rendered: Sample code using `ftd.set-rive-boolean(...)`

	-- ds.rendered.input:
	
	\-- ftd.rive:
	id: mousetoggle
	src: $fastn-assets.files.assets.toggleufbot.riv
	state-machine: StateMachine
	width.fixed.px: 400
	$on-mouse-enter$: $ftd.set-rive-boolean(rive = mousetoggle, input = Toggle, value = true)
	$on-mouse-leave$: $ftd.set-rive-boolean(rive = mousetoggle, input = Toggle, value = false)
	
	-- ds.rendered.output:
	
		-- ftd.rive:
		id: mousetoggle
		src: $fastn-assets.files.assets.toggleufbot.riv
		state-machine: StateMachine
		width.fixed.px: 400
		$on-mouse-enter$: $ftd.set-rive-boolean(rive = mousetoggle, input = Toggle, value = true)
		$on-mouse-leave$: $ftd.set-rive-boolean(rive = mousetoggle, input = Toggle, value = false)
		
	-- end: ds.rendered.output

-- end: ds.rendered






-- end: ds.page
