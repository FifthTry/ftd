-- ds.page: Using External CSS

Here, we will break down all the necessary details we
need to know before using external CSS properties in fastn.
We'll also briefly explore some of the most intriguing questions
that might cross our mind.

-- ds.h3: When should external CSS be used?

In cases, when we want to use any properties which are not yet supported
by fastn or maybe we wish to use certain experimental properties
which are recently released to test it out with fastn. In such cases,
the use of external CSS would be a viable choice.

-- ds.h3:  When should we avoid using it?

If `fastn` supports the properties you need, using external CSS is not recommended
Since there is a downside that the styles that are applied on the elements
using external CSS wont support any native fastn events. So it is
not recommended to use external CSS if you have to involve event handling
on those styles.

-- ds.h1: Sample data

We will need some CSS to use it as external CSS. For this, I'm using
this `my-style.css` that looks like this.

-- ds.code:
lang: css
download: my-style.css
copy: true

.my-class
{
    color: blue;
    font-size: 16px;
}

-- ds.h1: Let's use external CSS

First, we need to attach our CSS file or include inline CSS with
our fastn document. We will be using `my-style.css` file in our examples.
Attaching CSS file can be done in the following ways.

1. By using the [css](/common-attributes/#css) attribute (Recommended)
2. Using CLI flag (`--external-css`) when using fastn

**Note:** We can also include [inline CSS](/external-css#inline-css)
if we dont want to attach it as a CSS file.

-- ds.h3: Attaching CSS file using css attribute

This is the recommended way of attaching any CSS file
with your fastn document. Attaching css file is simple
just specify the file path of your CSS file using [assets](/assets/)
(in our case we will be referring to `my-style.css`)
to the [css](/common-attributes/#css) attribute
through component definition or invocation.

-- ds.code: Attaching CSS file on Component Definition
lang: ftd
download: index.ftd
copy: true

\-- import: <your-package-name>/assets

\-- component foo:
css: $assets.files.my-style.css ;; <hl>

\;; <DEFINITION OMITTED>

\-- end: foo

-- ds.code: Attaching CSS file on Component Invocation
lang: ftd
download: index.ftd
copy: true

\-- import: <your-package-name>/assets

\-- ftd.text: Hello World
css: $assets.files.my-style.css ;; <hl>

-- ds.markdown:

But hold on, wait a minute something ain't right. Here we have just attached
the CSS file and we haven't specified the CSS class we want to use on our
element. So there will be no change in style in the above case until we
[specify the CSS class](/external-css#specifying-css-class-on-elements)
on our elements.

-- ds.h3: Attaching CSS file using `--external-css` CLI flag

There is an alternative way of attaching CSS file through the use of
below mentioned CLI flag with fastn serve/build commands.

- `--external-css=<FILE-PATH>`: Using this flag, we can attach an CSS
file by providing its file path

-- ds.code: Sample usage
lang: sh

fastn serve --external-css=my-style.css

# We can also use it with fastn build command
# fastn build --external-css=my-style.css

-- ds.h3: Inline CSS

There is a CLI flag which can be used to include inline CSS from a CSS file
instead of attaching it using script tags.

- `--css=<FILE-PATH>`: Using this flag, we can include any CSS as inline
CSS from the CSS file specified.

-- ds.code: Sample usage
lang: sh

fastn serve --css=my-style.css

# We can also use it with fastn build command
# fastn build --css=my-style.css

-- ds.h1: Specifying CSS class on elements

Up until now, we have seen how easy it is to attach a CSS file
with our fastn documents. We will now specify the class on our elements
in order to use the CSS class styles from the external CSS file. In our case,
we will mention the class `my-class` (defined inside `my-style.css`) through the
[classes](/common-attributes/#classes) attribute during component
invocation. For example

-- ds.code:
lang: ftd
download: index.ftd
copy: true

\-- import: <your-package-name>/assets

\-- ftd.text: Hello World
css: $assets.files.my-style.css
classes: my-class ;; <hl>

-- ds.markdown:

In the above code, by adding `classes: my-class` attribute on your
element, we're basically instructing the browser to apply the
styling rules defined in the `my-class` class from the external
CSS file `my-style.css` to this text element. And this is how we use
external CSS in fastn.

-- end: ds.page
