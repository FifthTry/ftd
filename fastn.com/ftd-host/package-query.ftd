-- import: fastn.com/ftd/built-in-variables as v
-- import: fastn/processors as pr
-- import: fastn.com/ftd-host/processor


-- ds.page: Querying SQLite Using `fastn`

Note: This document is about querying SQLite Database that is part of your
`fastn` package. You can also [query PostgreSQL using `fastn`](/sql/).

`package-query` processor allows you to execute SQL queries against SQLite
files that are part of your `fastn` package.

-- processor.deprecated-sql-procesor:

-- processor.static-vs-dynamic:

-- ds.markdown:


And say you have an SQLite database file with table like this:

-- ds.code: creating table
lang: sql

\-- run `sqlite3 db.sqlite` in shell to create the database
\-- and paste this

CREATE TABLE user (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    department TEXT
);

-- ds.markdown:

And you have initialised it like this:

-- ds.code: inserting data
lang: sql

INSERT INTO user (name, department) VALUES ("amit", "engineering");
INSERT INTO user (name, department) VALUES ("jack", "ops");


-- ds.markdown:

Assuming the SQLite file is `db.sqlite`, you can fetch data from the SQLite
database using `package-query` processor:

-- ds.code: querying database and storing result in a list
lang: ftd

\-- import: fastn/processors as pr

\-- person list people:
$processor$: pr.package-query
db: db.sqlite

SELECT * FROM user;

-- ds.markdown:

For this to work, you have to also create a record with same data as the result
of your SQL query. In this query you are using `SELECT *`, which will fetch all
three columns, `id`, `name` and `department`, so your record will look something
like this:

-- ds.code: a record corresponding to your query result
lang: ftd

\-- record person:
integer id:
string name:
string department:


-- ds.markdown:

Note that the type columns in query result must match the type of fields in the
record. The order of fields of record must also match the order of columns in
the query result.

Also note that since the result of this query can be multiple rows (or one or
none), we have to read the result in a `person list`, so all data can be stored
in corresponding list.

-- ds.markdown:

Now that you have data in a variable, you can pass it to some component to view
it using the [`$loop$`](/list/#using-loop):


-- ds.code: show data in page ([view full source](https://github.com/fastn-stack/fastn.com/blob/main/ftd-host/package-query.ftd))
lang: ftd

\-- show-person: $p
for: $p in $people


-- ds.markdown:

Which will look something like this:


\-- show-person: $p
for: $p in $people

-- end: ds.page









-- component show-person:
caption person p:

-- ftd.column:
spacing.fixed.px: 10

	-- ds.h2: Person
	
	-- v.label-text: Name
	value: $show-person.p.name
	
	-- v.label-text: Department
	value: $show-person.p.department
	
-- end: ftd.column

-- end: show-person
