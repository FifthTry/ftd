-- import: fastn.com/assets
-- import: fastn.com/utils


-- ds.page: Formatting guidelines

Formatting guidelines help us to ensure that code is consistent, more readable,
well-formatted which can enhance the quality and effectiveness of
communication.

It is important for creating maintainable, efficient, and collaborative
codebases.

-- ds.h1: Best Practices

-- utils.code-display: `80-char`: 80 char in text editor
id: 80-char
show-vertical: true

80-character word wrapping is a useful practice that can not only improve the
readability, consistency, compatibility, accessibility, formatting of written
documents, but also the portability as it is more likely to work across
editors.


	-- ds.markdown:
	
	**Example:**
	
	-- ds.image:
	src: $assets.files.images.best-practices.80-char-ruler.png
	width: fill-container
	
	
	-- utils.tippy: Shortcut keys to Wrap Paragraph at Ruler in Sublime Text
	
	- **MacOS**: Cmd + Option + Q
	- **Windows**: Alt + Q
	
	-- ds.markdown:
	
	**When Paragraph is not wrapped at ruler:**
	
	-- ds.image:
	src: $assets.files.images.best-practices.bad-word-wrapping.png
	width: fill-container
	
	
	-- ds.markdown:
	
	**When Paragraph is wrapped at ruler:**
	
	-- ds.image:
	src: $assets.files.images.best-practices.good-word-wrapping.png
	width: fill-container
	
-- end: utils.code-display


-- utils.code-display:
title: `list-indentation`: Consistent markdown list indentation while wrapping
id: list-indentation
show-vertical: true

Indent wrapped lines in markdown lists by the same number of spaces as the
first character of the previous line, excluding any special characters.

	-- ds.markdown:
	
	**Not Recommended**
	
	-- ds.image:
	src: $assets.files.images.best-practices.list-indentation-bad.png
	width: fill-container
	
	
	**Recommended**
	
	-- ds.image:
	src: $assets.files.images.best-practices.list-indentation-good.png
	width: fill-container
	
	
-- end: utils.code-display







-- utils.code-display: `section-gap`: One line space between two sections
id: section-gap

Adding one line space between sections in a document can improve
it's `readability` and make it `easier for readers to distinguish different
parts` of the content.

	-- ds.code: Not recommended
	lang: ftd
	
	\-- component planning:  ;; <hl>
	\-- ftd.row:  ;; <hl>
	margin-top.px: 26
	padding-left.px: 50
	width.fixed.px: 1400
	height: fill-container
	\-- end: ftd.row:  ;; <hl>
	\-- end: planning  ;; <hl>
	
	-- ds.code: Recommended
	lang: ftd
	
	\-- component planning:
	\;; <hl>
	\-- ftd.row:
	margin-top.px: 26
	padding-left.px: 50
	width.fixed.px: 1400
	height: fill-container
	
	\-- end: ftd.row:
	\;; <hl>
	\-- end: planning
	
-- end: utils.code-display






-- utils.code-display: `colon-after-space`: One char space after `:`
id: colon-after-space

The convention of adding `one character space after a colon` in written
language is used to improve the `readability` of the text and make it `easier `
for readers to distinguish between the preceding text` and the `information
that follows`.

	-- ds.code: Not recommended
	lang: ftd
	
	\-- ftd.text:Hello
	
	-- ds.code: Recommended
	lang: ftd
	
	\-- ftd.text: Hello
	
-- end: utils.code-display










-- utils.code-display: `component-gap`: 10 line space between two components
id: component-gap

The convention of adding 10 line spaces between two components in a document is
a `formatting technique used to create a clear visual separation` and help
organize the content for easier reading and comprehension.

	-- ds.code: Not recommended
	lang: ftd
	
	\-- component c1:
	
	content of component goes here
	
	\-- end: c1
	
	\-- component c2:
	
	content of component goes here
	
	\-- end: c2
	
	-- ds.code: Recommended
	lang: ftd
	
	\-- component c1:
	
	content of component goes here
	
	\-- end: c1
	
	
	
	
	
	
	
	
	
	
	\-- component c2:
	
	content of component goes here
	
	\-- end: c2
	
-- end: utils.code-display


-- utils.code-display:
title: `end-line`: ensure a document ends with a trailing new line
id: end-line

It is done to ensure that the last line of code in the file does not end
without a newline.

This is because some programming languages or tools might interpret the
lack of a newline character as an error or warning, and it can also cause
problems when different code files are merged or concatenated. Therefore,
adding a newline at the end of the document is a good practice to ensure
consistent behavior across different tools and systems.

	-- ds.code: Not recommended
	lang: ftd
	
	\-- ds.page: Page 1
	
	content goes here.
	
	\-- end: ds.page
	
	
	-- ds.code: Recommended
	lang: ftd
	
	\-- ds.page: Page 1
	
	content goes here.
	
	\-- end: ds.page
	\;; <hl>
	
-- end: utils.code-display








-- utils.code-display:
title: `space-around-expression`: One char space at the start and end of conditional expression
id: space-around-expression

The convention of including a single space character before and after a
conditional expression is a common coding style that helps to make the code
more readable and easier to understand.

Including these spaces is not strictly necessary for the code to function
correctly, but it is considered good coding practice and can help make the code
easier to maintain and modify in the future.

	-- ds.code: Not recommended
	lang: ftd
	
	\-- integer num: 1
	
	\-- ftd.text: Number is 1
	if: {num == 1}	;; <hl>
	
	-- ds.code: Recommended
	lang: ftd
	
	\-- integer num: 1
	
	\-- ftd.text: Number is 1
	if: { num == 1 }	;; <hl>
	
-- end: utils.code-display







-- utils.code-display: `space-before-emoji`: One char space before emoji
id: space-before-emoji

Emoji are often considered as part of text in modern communication, and it is
essential to give proper formatting and spacing to ensure clear and effective
communication. When using an emoji after a word, it is recommended to treat it
as a separate word and leave a one-character space before the emoji.

Just as we give space between two different words, it is advisable to treat
words followed by emojis as two separate entities to maintain clarity and
effective communication.

	-- ds.code: Not recommended
	lang: ftd
	
	\;; -------- Example 1 --------
	
	\-- ds.page: FormattingðŸš§
	
	\;; -------- Example 2 --------
	
	\-- fastn.sitemap:
	
	# GuidelinesðŸš§
	
	## FormattingðŸš§
	
	- Space before emojiðŸš§: /url/
	
	-- ds.code: Recommended
	lang: ftd
	
	\;; -------- Example 1 --------
	
	\-- ds.page: Formatting ðŸš§
	
	\;; -------- Example 2 --------
	
	\-- fastn.sitemap:
	
	# Guidelines ðŸš§
	
	## Formatting ðŸš§
	
	- Space before emoji ðŸš§: /url/
	
-- end: utils.code-display



-- end: ds.page
