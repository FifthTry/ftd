pub fn identifier(
    scanner: &mut fastn_section::Scanner<fastn_section::Document>,
) -> Option<fastn_section::Identifier> {
    let first = scanner.peek()?;
    // the first character should be is_alphabetic or `_`
    if !first.is_alphabetic() && first != '_' {
        return None;
    }

    // later characters should be is_alphanumeric or `_` or `-`
    let span = scanner.take_while(|c| c.is_alphabetic() || c == '_' || c == '-')?;

    Some(fastn_section::Identifier { name: span })
}

#[cfg(test)]
mod test {
    fastn_section::tt!(super::identifier);

    #[test]
    fn identifier() {
        // identifiers can't start with a space
        t!(" foo", null, " foo");
        t!("foo", "foo");
        t!("foo bar", "foo", " bar");
        t!("_foo bar", "_foo", " bar");
        t!("_foo-bar", "_foo-bar");
        t!("рдирдо", "рдирдо");
        t!("_рдирдо-рдЬрди ", "_рдирдо-рдЬрди", " ");
        t!("_рдирд╛рдо-рдЬрд╛рдиреЗ", "_рдирд╛рдо-рдЬрд╛рдиреЗ");
        t!("_рдирд╛рдо-рдЬрд╛рдиреЗ ", "_рдирд╛рдо-рдЬрд╛рдиреЗ", " ");
        // emoji is not a valid identifier
        t!("рдирдоЁЯШж", "рдирдо", "ЁЯШж");
        t!("рдирдо ЁЯШж", "рдирдо", " ЁЯШж");
        t!("ЁЯШжрдирдо ", null, "ЁЯШжрдирдо ");
    }
}
